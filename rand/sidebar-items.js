initSidebarItems({"fn":[["random","Generates a random value using the thread-local random number generator."],["random_with","Generates a random value using the thread-local random number generator."],["thread_rng","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`."],["weak_rng","Create a weak random number generator with a default algorithm and seed."]],"mod":[["distributions","Sampling from random distributions."],["iter","Iterators attached to an `Rng`"],["prng","Pseudo random number generators are algorithms to produce apparently random numbers deterministically, and usually fairly quickly."],["reseeding","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes."],["sequences","Random operations on sequences"]],"struct":[["Default","A generic random value distribution. Generates values using what appears to be \"the best\" distribution for each type, but ultimately the choice is arbitrary."],["OsRng","A random number generator that retrieves randomness straight from the operating system. Platform sources:"],["ReadRng","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required."],["StdRng","The standard RNG. This is designed to be efficient on the current platform."],["ThreadRng","The thread-local RNG."]],"trait":[["Rng","A random number generator."],["SeedableRng","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times."]]});